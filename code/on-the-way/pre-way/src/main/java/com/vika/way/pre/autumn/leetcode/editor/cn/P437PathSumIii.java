//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÔºåÂÆÉÁöÑÊØè‰∏™ÁªìÁÇπÈÉΩÂ≠òÊîæÁùÄ‰∏Ä‰∏™Êï¥Êï∞ÂÄº„ÄÇ 
//
// ÊâæÂá∫Ë∑ØÂæÑÂíåÁ≠â‰∫éÁªôÂÆöÊï∞ÂÄºÁöÑË∑ØÂæÑÊÄªÊï∞„ÄÇ 
//
// Ë∑ØÂæÑ‰∏çÈúÄË¶Å‰ªéÊ†πËäÇÁÇπÂºÄÂßãÔºå‰πü‰∏çÈúÄË¶ÅÂú®Âè∂Â≠êËäÇÁÇπÁªìÊùüÔºå‰ΩÜÊòØË∑ØÂæÑÊñπÂêëÂøÖÈ°ªÊòØÂêë‰∏ãÁöÑÔºàÂè™ËÉΩ‰ªéÁà∂ËäÇÁÇπÂà∞Â≠êËäÇÁÇπÔºâ„ÄÇ 
//
// ‰∫åÂèâÊ†ë‰∏çË∂ÖËøá1000‰∏™ËäÇÁÇπÔºå‰∏îËäÇÁÇπÊï∞ÂÄºËåÉÂõ¥ÊòØ [-1000000,1000000] ÁöÑÊï¥Êï∞„ÄÇ 
//
// Á§∫‰æãÔºö 
//
// root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
//
//      10
//     /  \
//    5   -3
//   / \    \
//  3   2   11
// / \   \
//3  -2   1
//
//ËøîÂõû 3„ÄÇÂíåÁ≠â‰∫é 8 ÁöÑË∑ØÂæÑÊúâ:
//
//1.  5 -> 3
//2.  5 -> 2 -> 1
//3.  -3 -> 11
// 
// Related Topics Ê†ë 
// üëç 551 üëé 0


//JavaÔºöË∑ØÂæÑÊÄªÂíå III

package com.vika.way.pre.autumn.leetcode.editor.cn;

import java.util.HashMap;
import java.util.Map;

public class P437PathSumIii {
    public static void main(String[] args) {
        Solution solution = new P437PathSumIii().new Solution();
        // TO TEST
    }

    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode() {
        }

        TreeNode(int val) {
            this.val = val;
        }

        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /*
     * Definition for a binary tree node.
     */

    class Solution {
        public int pathSum1(TreeNode root, int sum) {
            if (root == null) {
                return 0;
            }
            return getPathSum(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);
        }

        public int getPathSum(TreeNode p, int target) {
            if (p == null) {
                return 0;
            }
            target -= p.val;
            return (target == 0 ? 1 : 0) + getPathSum(p.left, target) + getPathSum(p.right, target);
        }

        public int pathSum(TreeNode root, int sum) {
            Map<Integer, Integer> map = new HashMap<>();
            map.put(0, 1);
            return getPathSum(map, root, sum, 0);
        }

        public int getPathSum(Map<Integer, Integer> map, TreeNode p, int target, int sum) {
            if (p == null) {
                return 0;
            }
            sum += p.val;
            int paths = map.getOrDefault((sum - target), 0);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
            paths += getPathSum(map, p.left, target, sum) + getPathSum(map, p.right, target, sum);
            map.put(sum, map.get(sum) - 1);
            return paths;
        }

    }
//leetcode submit region end(Prohibit modification and deletion)

}