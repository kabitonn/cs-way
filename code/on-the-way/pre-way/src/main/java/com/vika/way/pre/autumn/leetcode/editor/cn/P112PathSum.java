//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÂíå‰∏Ä‰∏™ÁõÆÊ†áÂíåÔºåÂà§Êñ≠ËØ•Ê†ë‰∏≠ÊòØÂê¶Â≠òÂú®Ê†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑÔºåËøôÊù°Ë∑ØÂæÑ‰∏äÊâÄÊúâËäÇÁÇπÂÄºÁõ∏Âä†Á≠â‰∫éÁõÆÊ†áÂíå„ÄÇ 
//
// ËØ¥Êòé: Âè∂Â≠êËäÇÁÇπÊòØÊåáÊ≤°ÊúâÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇ 
//
// Á§∫‰æã: 
//ÁªôÂÆöÂ¶Ç‰∏ã‰∫åÂèâÊ†ëÔºå‰ª•ÂèäÁõÆÊ†áÂíå sum = 22Ôºå 
//
//               5
//             / \
//            4   8
//           /   / \
//          11  13  4
//         /  \      \
//        7    2      1
// 
//
// ËøîÂõû true, Âõ†‰∏∫Â≠òÂú®ÁõÆÊ†áÂíå‰∏∫ 22 ÁöÑÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ 5->4->11->2„ÄÇ 
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ 
// üëç 416 üëé 0


//JavaÔºöË∑ØÂæÑÊÄªÂíå

package com.vika.way.pre.autumn.leetcode.editor.cn;

import java.util.Stack;

public class P112PathSum {
    public static void main(String[] args) {
        Solution solution = new P112PathSum().new Solution();
        // TO TEST
    }

    /**
     * Definition for a binary tree node.
     */
    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) {
            val = x;
        }
    }

    //leetcode submit region begin(Prohibit modification and deletion)


    class Solution {
        public boolean hasPathSum1(TreeNode root, int sum) {
            return pathSum(root, sum);
        }

        public boolean pathSum(TreeNode p, int sum) {
            if (p == null) {
                return false;
            }
            sum -= p.val;
            if (p.left == null && p.right == null && 0 == sum) {
                return true;
            }
            return pathSum(p.left, sum) || pathSum(p.right, sum);
        }

        public boolean hasPathSum(TreeNode root, int sum) {
            Stack<TreeNode> stack = new Stack<>();
            Stack<Integer> leftSumStack = new Stack<>();
            TreeNode p = root;
            int leftSum = sum;
            while (p != null || !stack.isEmpty()) {
                while (p != null) {
                    stack.push(p);
                    leftSum -= p.val;
                    leftSumStack.push(leftSum);
                    p = p.left;
                }
                p = stack.pop();
                leftSum = leftSumStack.pop();
                if (p.left == null && p.right == null && leftSum == 0) {
                    return true;
                }
                p = p.right;
            }
            return false;
        }

    }
//leetcode submit region end(Prohibit modification and deletion)

}