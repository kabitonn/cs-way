import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,c,a as n,b as p,F as u,d as s,f as t,o as l}from"./app.005c29cc.js";const i={},r=n("ul",null,[n("li",null,[n("a",{href:"#1-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E5%80%BC"},"1. \u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u7684\u548C\u4E3A\u7ED9\u5B9A\u503C")]),n("li",null,[n("a",{href:"#2-%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0"},"2. \u5224\u65AD\u6570\u7EC4\u662F\u5426\u542B\u6709\u91CD\u590D\u5143\u7D20")]),n("li",null,[n("a",{href:"#3-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%BA%8F%E5%88%97"},"3. \u6700\u957F\u548C\u8C10\u5E8F\u5217")]),n("li",null,[n("a",{href:"#4-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97"},"4. \u6700\u957F\u8FDE\u7EED\u5E8F\u5217")])],-1),k=n("p",null,"\u54C8\u5E0C\u8868\u4F7F\u7528 O(N) \u7A7A\u95F4\u590D\u6742\u5EA6\u5B58\u50A8\u6570\u636E\uFF0C\u5E76\u4E14\u4EE5 O(1) \u65F6\u95F4\u590D\u6742\u5EA6\u6C42\u89E3\u95EE\u9898\u3002",-1),m=n("li",null,[n("p",null,[s("Java \u4E2D\u7684 "),n("strong",null,"HashSet"),s(" \u7528\u4E8E\u5B58\u50A8\u4E00\u4E2A\u96C6\u5408\uFF0C\u53EF\u4EE5\u67E5\u627E\u5143\u7D20\u662F\u5426\u5728\u96C6\u5408\u4E2D\u3002\u5982\u679C\u5143\u7D20\u6709\u7A77\uFF0C\u5E76\u4E14\u8303\u56F4\u4E0D\u5927\uFF0C\u90A3\u4E48\u53EF\u4EE5\u7528\u4E00\u4E2A\u5E03\u5C14\u6570\u7EC4\u6765\u5B58\u50A8\u4E00\u4E2A\u5143\u7D20\u662F\u5426\u5B58\u5728\u3002\u4F8B\u5982\u5BF9\u4E8E\u53EA\u6709\u5C0F\u5199\u5B57\u7B26\u7684\u5143\u7D20\uFF0C\u5C31\u53EF\u4EE5\u7528\u4E00\u4E2A\u957F\u5EA6\u4E3A 26 \u7684\u5E03\u5C14\u6570\u7EC4\u6765\u5B58\u50A8\u4E00\u4E2A\u5B57\u7B26\u96C6\u5408\uFF0C\u4F7F\u5F97\u7A7A\u95F4\u590D\u6742\u5EA6\u964D\u4F4E\u4E3A O(1)\u3002")])],-1),d=s("Java \u4E2D\u7684 "),b=n("strong",null,"HashMap",-1),h=s(" \u4E3B\u8981\u7528\u4E8E\u6620\u5C04\u5173\u7CFB\uFF0C\u4ECE\u800C\u628A\u4E24\u4E2A\u5143\u7D20\u8054\u7CFB\u8D77\u6765\u3002HashMap \u4E5F\u53EF\u4EE5\u7528\u6765\u5BF9\u5143\u7D20\u8FDB\u884C\u8BA1\u6570\u7EDF\u8BA1\uFF0C\u6B64\u65F6\u952E\u4E3A\u5143\u7D20\uFF0C\u503C\u4E3A\u8BA1\u6570\u3002\u548C HashSet \u7C7B\u4F3C\uFF0C\u5982\u679C\u5143\u7D20\u6709\u7A77\u5E76\u4E14\u8303\u56F4\u4E0D\u5927\uFF0C\u53EF\u4EE5\u7528\u6574\u578B\u6570\u7EC4\u6765\u8FDB\u884C\u7EDF\u8BA1\u3002\u5728\u5BF9\u4E00\u4E2A\u5185\u5BB9\u8FDB\u884C\u538B\u7F29\u6216\u8005\u5176\u5B83\u8F6C\u6362\u65F6\uFF0C\u5229\u7528 HashMap \u53EF\u4EE5\u628A\u539F\u59CB\u5185\u5BB9\u548C\u8F6C\u6362\u540E\u7684\u5185\u5BB9\u8054\u7CFB\u8D77\u6765\u3002\u4F8B\u5982\u5728\u4E00\u4E2A\u7B80\u5316 url \u7684\u7CFB\u7EDF\u4E2D "),g={href:"https://leetcode.com/problems/encode-and-decode-tinyurl/description/",target:"_blank",rel:"noopener noreferrer"},_=s("Leetcdoe : 535. Encode and Decode TinyURL (Medium)"),f=s("\uFF0C\u5229\u7528 HashMap \u5C31\u53EF\u4EE5\u5B58\u50A8\u7CBE\u7B80\u540E\u7684 url \u5230\u539F\u59CB url \u7684\u6620\u5C04\uFF0C\u4F7F\u5F97\u4E0D\u4EC5\u53EF\u4EE5\u663E\u793A\u7B80\u5316\u7684 url\uFF0C\u4E5F\u53EF\u4EE5\u6839\u636E\u7B80\u5316\u7684 url \u5F97\u5230\u539F\u59CB url \u4ECE\u800C\u5B9A\u4F4D\u5230\u6B63\u786E\u7684\u8D44\u6E90\u3002"),w=n("h1",{id:"_1-\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u7684\u548C\u4E3A\u7ED9\u5B9A\u503C",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u7684\u548C\u4E3A\u7ED9\u5B9A\u503C","aria-hidden":"true"},"#"),s(" 1. \u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u7684\u548C\u4E3A\u7ED9\u5B9A\u503C")],-1),y={href:"https://leetcode.com/problems/two-sum/description/",target:"_blank",rel:"noopener noreferrer"},E=s("1. Two Sum (Easy)"),v=t(`<p>\u53EF\u4EE5\u5148\u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\uFF0C\u7136\u540E\u4F7F\u7528\u53CC\u6307\u9488\u65B9\u6CD5\u6216\u8005\u4E8C\u5206\u67E5\u627E\u65B9\u6CD5\u3002\u8FD9\u6837\u505A\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(NlogN)\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3A O(1)\u3002</p><p>\u7528 HashMap \u5B58\u50A8\u6570\u7EC4\u5143\u7D20\u548C\u7D22\u5F15\u7684\u6620\u5C04\uFF0C\u5728\u8BBF\u95EE\u5230 nums[i] \u65F6\uFF0C\u5224\u65AD HashMap \u4E2D\u662F\u5426\u5B58\u5728 target - nums[i]\uFF0C\u5982\u679C\u5B58\u5728\u8BF4\u660E target - nums[i] \u6240\u5728\u7684\u7D22\u5F15\u548C i \u5C31\u662F\u8981\u627E\u7684\u4E24\u4E2A\u6570\u3002\u8BE5\u65B9\u6CD5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(N)\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3A O(N)\uFF0C\u4F7F\u7528\u7A7A\u95F4\u6765\u6362\u53D6\u65F6\u95F4\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexForNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexForNum<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>indexForNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            indexForNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="_2-\u5224\u65AD\u6570\u7EC4\u662F\u5426\u542B\u6709\u91CD\u590D\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_2-\u5224\u65AD\u6570\u7EC4\u662F\u5426\u542B\u6709\u91CD\u590D\u5143\u7D20" aria-hidden="true">#</a> 2. \u5224\u65AD\u6570\u7EC4\u662F\u5426\u542B\u6709\u91CD\u590D\u5143\u7D20</h1>`,4),N={href:"https://leetcode.com/problems/contains-duplicate/description/",target:"_blank",rel:"noopener noreferrer"},F=s("217. Contains Duplicate (Easy)"),x=t(`<div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1 id="_3-\u6700\u957F\u548C\u8C10\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#_3-\u6700\u957F\u548C\u8C10\u5E8F\u5217" aria-hidden="true">#</a> 3. \u6700\u957F\u548C\u8C10\u5E8F\u5217</h1>`,2),B={href:"https://leetcode.com/problems/longest-harmonious-subsequence/description/",target:"_blank",rel:"noopener noreferrer"},A=s("594. Longest Harmonious Subsequence (Easy)"),M=t(`<div class="language-html ext-html"><pre class="language-html"><code>Input: [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
</code></pre></div><p>\u548C\u8C10\u5E8F\u5217\u4E2D\u6700\u5927\u6570\u548C\u6700\u5C0F\u6570\u4E4B\u5DEE\u6B63\u597D\u4E3A 1\uFF0C\u5E94\u8BE5\u6CE8\u610F\u7684\u662F\u5E8F\u5217\u7684\u5143\u7D20\u4E0D\u4E00\u5B9A\u662F\u6570\u7EC4\u7684\u8FDE\u7EED\u5143\u7D20\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLHS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> countForNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        countForNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> countForNum<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> longest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> countForNum<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>countForNum<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            longest <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>longest<span class="token punctuation">,</span> countForNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> countForNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> longest<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h1 id="_4-\u6700\u957F\u8FDE\u7EED\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#_4-\u6700\u957F\u8FDE\u7EED\u5E8F\u5217" aria-hidden="true">#</a> 4. \u6700\u957F\u8FDE\u7EED\u5E8F\u5217</h1>`,4),H={href:"https://leetcode.com/problems/longest-consecutive-sequence/description/",target:"_blank",rel:"noopener noreferrer"},I=s("128. Longest Consecutive Sequence (Hard)"),j=t(`<div class="language-html ext-html"><pre class="language-html"><code>Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.
</code></pre></div><p>\u8981\u6C42\u4EE5 O(N) \u7684\u65F6\u95F4\u590D\u6742\u5EA6\u6C42\u89E3\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> countForNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        countForNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">forward</span><span class="token punctuation">(</span>countForNum<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">maxCount</span><span class="token punctuation">(</span>countForNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> countForNum<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>countForNum<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> countForNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cnt <span class="token operator">=</span> <span class="token function">forward</span><span class="token punctuation">(</span>countForNum<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    countForNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">maxCount</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> countForNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> countForNum<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> countForNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>`,3);function C(S,O){const a=o("ExternalLinkIcon");return l(),c(u,null,[r,k,n("ul",null,[m,n("li",null,[n("p",null,[d,b,h,n("a",g,[_,p(a)]),f])])]),w,n("p",null,[n("a",y,[E,p(a)])]),v,n("p",null,[n("a",N,[F,p(a)])]),x,n("p",null,[n("a",B,[A,p(a)])]),M,n("p",null,[n("a",H,[I,p(a)])]),j],64)}var q=e(i,[["render",C],["__file","Leetcode\u9898\u89E3-\u54C8\u5E0C\u8868.html.vue"]]);export{q as default};
