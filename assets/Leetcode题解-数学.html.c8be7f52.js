import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,c,a as n,b as p,F as l,f as s,d as t,o as u}from"./app.005c29cc.js";const r={},i=s('<ul><li><a href="#%E7%B4%A0%E6%95%B0%E5%88%86%E8%A7%A3">\u7D20\u6570\u5206\u89E3</a></li><li><a href="#%E6%95%B4%E9%99%A4">\u6574\u9664</a></li><li><a href="#%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0">\u6700\u5927\u516C\u7EA6\u6570\u6700\u5C0F\u516C\u500D\u6570</a><ul><li><a href="#1-%E7%94%9F%E6%88%90%E7%B4%A0%E6%95%B0%E5%BA%8F%E5%88%97">1. \u751F\u6210\u7D20\u6570\u5E8F\u5217</a></li><li><a href="#2-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0">2. \u6700\u5927\u516C\u7EA6\u6570</a></li><li><a href="#3-%E4%BD%BF%E7%94%A8%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8C%E5%87%8F%E6%B3%95%E6%B1%82%E8%A7%A3%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0">3. \u4F7F\u7528\u4F4D\u64CD\u4F5C\u548C\u51CF\u6CD5\u6C42\u89E3\u6700\u5927\u516C\u7EA6\u6570</a></li></ul></li><li><a href="#%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2">\u8FDB\u5236\u8F6C\u6362</a><ul><li><a href="#1-7-%E8%BF%9B%E5%88%B6">1. 7 \u8FDB\u5236</a></li><li><a href="#2-16-%E8%BF%9B%E5%88%B6">2. 16 \u8FDB\u5236</a></li><li><a href="#3-26-%E8%BF%9B%E5%88%B6">3. 26 \u8FDB\u5236</a></li></ul></li><li><a href="#%E9%98%B6%E4%B9%98">\u9636\u4E58</a><ul><li><a href="#1-%E7%BB%9F%E8%AE%A1%E9%98%B6%E4%B9%98%E5%B0%BE%E9%83%A8%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA-0">1. \u7EDF\u8BA1\u9636\u4E58\u5C3E\u90E8\u6709\u591A\u5C11\u4E2A 0</a></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E6%B3%95%E5%87%8F%E6%B3%95">\u5B57\u7B26\u4E32\u52A0\u6CD5\u51CF\u6CD5</a><ul><li><a href="#1-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95">1. \u4E8C\u8FDB\u5236\u52A0\u6CD5</a></li><li><a href="#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E6%B3%95">2. \u5B57\u7B26\u4E32\u52A0\u6CD5</a></li></ul></li><li><a href="#%E7%9B%B8%E9%81%87%E9%97%AE%E9%A2%98">\u76F8\u9047\u95EE\u9898</a><ul><li><a href="#1-%E6%94%B9%E5%8F%98%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E4%BD%BF%E6%89%80%E6%9C%89%E7%9A%84%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E9%83%BD%E7%9B%B8%E7%AD%89">1. \u6539\u53D8\u6570\u7EC4\u5143\u7D20\u4F7F\u6240\u6709\u7684\u6570\u7EC4\u5143\u7D20\u90FD\u76F8\u7B49</a></li></ul></li><li><a href="#%E5%A4%9A%E6%95%B0%E6%8A%95%E7%A5%A8%E9%97%AE%E9%A2%98">\u591A\u6570\u6295\u7968\u95EE\u9898</a><ul><li><a href="#1-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E5%A4%9A%E4%BA%8E-n--2-%E7%9A%84%E5%85%83%E7%B4%A0">1. \u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u591A\u4E8E n / 2 \u7684\u5143\u7D20</a></li></ul></li><li><a href="#%E5%85%B6%E5%AE%83">\u5176\u5B83</a><ul><li><a href="#1-%E5%B9%B3%E6%96%B9%E6%95%B0">1. \u5E73\u65B9\u6570</a></li><li><a href="#2-3-%E7%9A%84-n-%E6%AC%A1%E6%96%B9">2. 3 \u7684 n \u6B21\u65B9</a></li><li><a href="#3-%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84">3. \u4E58\u79EF\u6570\u7EC4</a></li><li><a href="#4-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E4%B8%89%E4%B8%AA%E6%95%B0">4. \u627E\u51FA\u6570\u7EC4\u4E2D\u7684\u4E58\u79EF\u6700\u5927\u7684\u4E09\u4E2A\u6570</a></li></ul></li></ul><h1 id="\u7D20\u6570\u5206\u89E3" tabindex="-1"><a class="header-anchor" href="#\u7D20\u6570\u5206\u89E3" aria-hidden="true">#</a> \u7D20\u6570\u5206\u89E3</h1><p>\u6BCF\u4E00\u4E2A\u6570\u90FD\u53EF\u4EE5\u5206\u89E3\u6210\u7D20\u6570\u7684\u4E58\u79EF\uFF0C\u4F8B\u5982 84 = 2<sup>2</sup> * 3<sup>1</sup> * 5<sup>0</sup> * 7<sup>1</sup> * 11<sup>0</sup> * 13<sup>0</sup> * 17<sup>0</sup> * \u2026</p><h1 id="\u6574\u9664" tabindex="-1"><a class="header-anchor" href="#\u6574\u9664" aria-hidden="true">#</a> \u6574\u9664</h1><p>\u4EE4 x = 2<sup>m0</sup> * 3<sup>m1</sup> * 5<sup>m2</sup> * 7<sup>m3</sup> * 11<sup>m4</sup> * \u2026</p><p>\u4EE4 y = 2<sup>n0</sup> * 3<sup>n1</sup> * 5<sup>n2</sup> * 7<sup>n3</sup> * 11<sup>n4</sup> * \u2026</p><p>\u5982\u679C x \u6574\u9664 y\uFF08y mod x == 0\uFF09\uFF0C\u5219\u5BF9\u4E8E\u6240\u6709 i\uFF0Cmi &lt;= ni\u3002</p><h1 id="\u6700\u5927\u516C\u7EA6\u6570\u6700\u5C0F\u516C\u500D\u6570" tabindex="-1"><a class="header-anchor" href="#\u6700\u5927\u516C\u7EA6\u6570\u6700\u5C0F\u516C\u500D\u6570" aria-hidden="true">#</a> \u6700\u5927\u516C\u7EA6\u6570\u6700\u5C0F\u516C\u500D\u6570</h1><p>x \u548C y \u7684\u6700\u5927\u516C\u7EA6\u6570\u4E3A\uFF1Agcd(x,y) = 2<sup>min(m0,n0)</sup> * 3<sup>min(m1,n1)</sup> * 5<sup>min(m2,n2)</sup> * ...</p><p>x \u548C y \u7684\u6700\u5C0F\u516C\u500D\u6570\u4E3A\uFF1Alcm(x,y) = 2<sup>max(m0,n0)</sup> * 3<sup>max(m1,n1)</sup> * 5<sup>max(m2,n2)</sup> * ...</p><h2 id="_1-\u751F\u6210\u7D20\u6570\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#_1-\u751F\u6210\u7D20\u6570\u5E8F\u5217" aria-hidden="true">#</a> 1. \u751F\u6210\u7D20\u6570\u5E8F\u5217</h2>',11),k={href:"https://leetcode.com/problems/count-primes/description/",target:"_blank",rel:"noopener noreferrer"},b=t("204. Count Primes (Easy)"),m=s(`<p>\u57C3\u62C9\u6258\u65AF\u7279\u5C3C\u7B5B\u6CD5\u5728\u6BCF\u6B21\u627E\u5230\u4E00\u4E2A\u7D20\u6570\u65F6\uFF0C\u5C06\u80FD\u88AB\u7D20\u6570\u6574\u9664\u7684\u6570\u6392\u9664\u6389\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> notPrimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>notPrimes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4ECE i * i \u5F00\u59CB\uFF0C\u56E0\u4E3A\u5982\u679C k &lt; i\uFF0C\u90A3\u4E48 k * i \u5728\u4E4B\u524D\u5C31\u5DF2\u7ECF\u88AB\u53BB\u9664\u8FC7\u4E86</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            notPrimes<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_2-\u6700\u5927\u516C\u7EA6\u6570" tabindex="-1"><a class="header-anchor" href="#_2-\u6700\u5927\u516C\u7EA6\u6570" aria-hidden="true">#</a> 2. \u6700\u5927\u516C\u7EA6\u6570</h2><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6700\u5C0F\u516C\u500D\u6570\u4E3A\u4E24\u6570\u7684\u4E58\u79EF\u9664\u4EE5\u6700\u5927\u516C\u7EA6\u6570\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_3-\u4F7F\u7528\u4F4D\u64CD\u4F5C\u548C\u51CF\u6CD5\u6C42\u89E3\u6700\u5927\u516C\u7EA6\u6570" tabindex="-1"><a class="header-anchor" href="#_3-\u4F7F\u7528\u4F4D\u64CD\u4F5C\u548C\u51CF\u6CD5\u6C42\u89E3\u6700\u5927\u516C\u7EA6\u6570" aria-hidden="true">#</a> 3. \u4F7F\u7528\u4F4D\u64CD\u4F5C\u548C\u51CF\u6CD5\u6C42\u89E3\u6700\u5927\u516C\u7EA6\u6570</h2><p><a href="#">\u7F16\u7A0B\u4E4B\u7F8E\uFF1A2.7</a></p><p>\u5BF9\u4E8E a \u548C b \u7684\u6700\u5927\u516C\u7EA6\u6570 f(a, b)\uFF0C\u6709\uFF1A</p><ul><li>\u5982\u679C a \u548C b \u5747\u4E3A\u5076\u6570\uFF0Cf(a, b) = 2*f(a/2, b/2);</li><li>\u5982\u679C a \u662F\u5076\u6570 b \u662F\u5947\u6570\uFF0Cf(a, b) = f(a/2, b);</li><li>\u5982\u679C b \u662F\u5076\u6570 a \u662F\u5947\u6570\uFF0Cf(a, b) = f(a, b/2);</li><li>\u5982\u679C a \u548C b \u5747\u4E3A\u5947\u6570\uFF0Cf(a, b) = f(b, a-b);</li></ul><p>\u4E58 2 \u548C\u9664 2 \u90FD\u53EF\u4EE5\u8F6C\u6362\u4E3A\u79FB\u4F4D\u64CD\u4F5C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">boolean</span> isAEven <span class="token operator">=</span> <span class="token function">isEven</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> isBEven <span class="token operator">=</span> <span class="token function">isEven</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isAEven <span class="token operator">&amp;&amp;</span> isBEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isAEven <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isBEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAEven <span class="token operator">&amp;&amp;</span> isBEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h1 id="\u8FDB\u5236\u8F6C\u6362" tabindex="-1"><a class="header-anchor" href="#\u8FDB\u5236\u8F6C\u6362" aria-hidden="true">#</a> \u8FDB\u5236\u8F6C\u6362</h1><h2 id="_1-7-\u8FDB\u5236" tabindex="-1"><a class="header-anchor" href="#_1-7-\u8FDB\u5236" aria-hidden="true">#</a> 1. 7 \u8FDB\u5236</h2>`,14),d={href:"https://leetcode.com/problems/base-7/description/",target:"_blank",rel:"noopener noreferrer"},h=t("504. Base 7 (Easy)"),y=s(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> isNegative <span class="token operator">=</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isNegative<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">/=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> ret <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> isNegative <span class="token operator">?</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> ret <span class="token operator">:</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Java \u4E2D static String toString(int num, int radix) \u53EF\u4EE5\u5C06\u4E00\u4E2A\u6574\u6570\u8F6C\u6362\u4E3A radix \u8FDB\u5236\u8868\u793A\u7684\u5B57\u7B26\u4E32\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_2-16-\u8FDB\u5236" tabindex="-1"><a class="header-anchor" href="#_2-16-\u8FDB\u5236" aria-hidden="true">#</a> 2. 16 \u8FDB\u5236</h2>`,4),g={href:"https://leetcode.com/problems/convert-a-number-to-hexadecimal/description/",target:"_blank",rel:"noopener noreferrer"},f=t("405. Convert a Number to Hexadecimal (Easy)"),w=s(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:
26

Output:
&quot;1a&quot;

Input:
-1

Output:
&quot;ffffffff&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u8D1F\u6570\u8981\u7528\u5B83\u7684\u8865\u7801\u5F62\u5F0F\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>num <span class="token operator">&amp;</span> <span class="token number">0b1111</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// \u56E0\u4E3A\u8003\u8651\u7684\u662F\u8865\u7801\u5F62\u5F0F\uFF0C\u56E0\u6B64\u7B26\u53F7\u4F4D\u5C31\u4E0D\u80FD\u6709\u7279\u6B8A\u7684\u610F\u4E49\uFF0C\u9700\u8981\u4F7F\u7528\u65E0\u7B26\u53F7\u53F3\u79FB\uFF0C\u5DE6\u8FB9\u586B 0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_3-26-\u8FDB\u5236" tabindex="-1"><a class="header-anchor" href="#_3-26-\u8FDB\u5236" aria-hidden="true">#</a> 3. 26 \u8FDB\u5236</h2>`,4),E={href:"https://leetcode.com/problems/excel-sheet-column-title/description/",target:"_blank",rel:"noopener noreferrer"},v=t("168. Excel Sheet Column Title (Easy)"),_=s(`<div class="language-html ext-html"><pre class="language-html"><code>1 -&gt; A
2 -&gt; B
3 -&gt; C
...
26 -&gt; Z
27 -&gt; AA
28 -&gt; AB
</code></pre></div><p>\u56E0\u4E3A\u662F\u4ECE 1 \u5F00\u59CB\u8BA1\u7B97\u7684\uFF0C\u800C\u4E0D\u662F\u4ECE 0 \u5F00\u59CB\uFF0C\u56E0\u6B64\u9700\u8981\u5BF9 n \u6267\u884C -1 \u64CD\u4F5C\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    n<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1 id="\u9636\u4E58" tabindex="-1"><a class="header-anchor" href="#\u9636\u4E58" aria-hidden="true">#</a> \u9636\u4E58</h1><h2 id="_1-\u7EDF\u8BA1\u9636\u4E58\u5C3E\u90E8\u6709\u591A\u5C11\u4E2A-0" tabindex="-1"><a class="header-anchor" href="#_1-\u7EDF\u8BA1\u9636\u4E58\u5C3E\u90E8\u6709\u591A\u5C11\u4E2A-0" aria-hidden="true">#</a> 1. \u7EDF\u8BA1\u9636\u4E58\u5C3E\u90E8\u6709\u591A\u5C11\u4E2A 0</h2>`,5),B={href:"https://leetcode.com/problems/factorial-trailing-zeroes/description/",target:"_blank",rel:"noopener noreferrer"},A=t("172. Factorial Trailing Zeroes (Easy)"),x=s(`<p>\u5C3E\u90E8\u7684 0 \u7531 2 * 5 \u5F97\u6765\uFF0C2 \u7684\u6570\u91CF\u660E\u663E\u591A\u4E8E 5 \u7684\u6570\u91CF\uFF0C\u56E0\u6B64\u53EA\u8981\u7EDF\u8BA1\u6709\u591A\u5C11\u4E2A 5 \u5373\u53EF\u3002</p><p>\u5BF9\u4E8E\u4E00\u4E2A\u6570 N\uFF0C\u5B83\u6240\u5305\u542B 5 \u7684\u4E2A\u6570\u4E3A\uFF1AN/5 + N/5<sup>2</sup> + N/5<sup>3</sup> + ...\uFF0C\u5176\u4E2D N/5 \u8868\u793A\u4E0D\u5927\u4E8E N \u7684\u6570\u4E2D 5 \u7684\u500D\u6570\u8D21\u732E\u4E00\u4E2A 5\uFF0CN/5<sup>2</sup> \u8868\u793A\u4E0D\u5927\u4E8E N \u7684\u6570\u4E2D 5<sup>2</sup> \u7684\u500D\u6570\u518D\u8D21\u732E\u4E00\u4E2A 5 ...\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> n <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C\u7EDF\u8BA1\u7684\u662F N! \u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D\u6700\u4F4E\u4F4D 1 \u7684\u4F4D\u7F6E\uFF0C\u53EA\u8981\u7EDF\u8BA1\u6709\u591A\u5C11\u4E2A 2 \u5373\u53EF\uFF0C\u8BE5\u9898\u76EE\u51FA\u81EA <a href="#">\u7F16\u7A0B\u4E4B\u7F8E\uFF1A2.2</a> \u3002\u548C\u6C42\u89E3\u6709\u591A\u5C11\u4E2A 5 \u4E00\u6837\uFF0C2 \u7684\u4E2A\u6570\u4E3A N/2 + N/2<sup>2</sup> + N/2<sup>3</sup> + ...</p><h1 id="\u5B57\u7B26\u4E32\u52A0\u6CD5\u51CF\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u52A0\u6CD5\u51CF\u6CD5" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u52A0\u6CD5\u51CF\u6CD5</h1><h2 id="_1-\u4E8C\u8FDB\u5236\u52A0\u6CD5" tabindex="-1"><a class="header-anchor" href="#_1-\u4E8C\u8FDB\u5236\u52A0\u6CD5" aria-hidden="true">#</a> 1. \u4E8C\u8FDB\u5236\u52A0\u6CD5</h2>`,6),j={href:"https://leetcode.com/problems/add-binary/description/",target:"_blank",rel:"noopener noreferrer"},S=t("67. Add Binary (Easy)"),N=s(`<div class="language-html ext-html"><pre class="language-html"><code>a = &quot;11&quot;
b = &quot;1&quot;
Return &quot;100&quot;.
</code></pre></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addBinary</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            carry<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            carry<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        carry <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_2-\u5B57\u7B26\u4E32\u52A0\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-\u5B57\u7B26\u4E32\u52A0\u6CD5" aria-hidden="true">#</a> 2. \u5B57\u7B26\u4E32\u52A0\u6CD5</h2>`,3),C={href:"https://leetcode.com/problems/add-strings/description/",target:"_blank",rel:"noopener noreferrer"},q=t("415. Add Strings (Easy)"),F=s(`<p>\u5B57\u7B26\u4E32\u7684\u503C\u4E3A\u975E\u8D1F\u6574\u6570\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        carry <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="\u76F8\u9047\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u76F8\u9047\u95EE\u9898" aria-hidden="true">#</a> \u76F8\u9047\u95EE\u9898</h1><h2 id="_1-\u6539\u53D8\u6570\u7EC4\u5143\u7D20\u4F7F\u6240\u6709\u7684\u6570\u7EC4\u5143\u7D20\u90FD\u76F8\u7B49" tabindex="-1"><a class="header-anchor" href="#_1-\u6539\u53D8\u6570\u7EC4\u5143\u7D20\u4F7F\u6240\u6709\u7684\u6570\u7EC4\u5143\u7D20\u90FD\u76F8\u7B49" aria-hidden="true">#</a> 1. \u6539\u53D8\u6570\u7EC4\u5143\u7D20\u4F7F\u6240\u6709\u7684\u6570\u7EC4\u5143\u7D20\u90FD\u76F8\u7B49</h2>`,4),I={href:"https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/description/",target:"_blank",rel:"noopener noreferrer"},M=t("462. Minimum Moves to Equal Array Elements II (Medium)"),D=s(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:
[1,2,3]

Output:
2

Explanation:
Only two moves are needed (remember each move increments or decrements one element):

[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u6BCF\u6B21\u53EF\u4EE5\u5BF9\u4E00\u4E2A\u6570\u7EC4\u5143\u7D20\u52A0\u4E00\u6216\u8005\u51CF\u4E00\uFF0C\u6C42\u6700\u5C0F\u7684\u6539\u53D8\u6B21\u6570\u3002</p><p>\u8FD9\u662F\u4E2A\u5178\u578B\u7684\u76F8\u9047\u95EE\u9898\uFF0C\u79FB\u52A8\u8DDD\u79BB\u6700\u5C0F\u7684\u65B9\u5F0F\u662F\u6240\u6709\u5143\u7D20\u90FD\u79FB\u52A8\u5230\u4E2D\u4F4D\u6570\u3002\u7406\u7531\u5982\u4E0B\uFF1A</p><p>\u8BBE m \u4E3A\u4E2D\u4F4D\u6570\u3002a \u548C b \u662F m \u4E24\u8FB9\u7684\u4E24\u4E2A\u5143\u7D20\uFF0C\u4E14 b &gt; a\u3002\u8981\u4F7F a \u548C b \u76F8\u7B49\uFF0C\u5B83\u4EEC\u603B\u5171\u79FB\u52A8\u7684\u6B21\u6570\u4E3A b - a\uFF0C\u8FD9\u4E2A\u503C\u7B49\u4E8E (b - m) + (m - a)\uFF0C\u4E5F\u5C31\u662F\u628A\u8FD9\u4E24\u4E2A\u6570\u79FB\u52A8\u5230\u4E2D\u4F4D\u6570\u7684\u79FB\u52A8\u6B21\u6570\u3002</p><p>\u8BBE\u6570\u7EC4\u957F\u5EA6\u4E3A N\uFF0C\u5219\u53EF\u4EE5\u627E\u5230 N/2 \u5BF9 a \u548C b \u7684\u7EC4\u5408\uFF0C\u4F7F\u5B83\u4EEC\u90FD\u79FB\u52A8\u5230 m \u7684\u4F4D\u7F6E\u3002</p><p><strong>\u89E3\u6CD5 1</strong></p><p>\u5148\u6392\u5E8F\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\uFF1AO(NlogN)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMoves2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> move <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        move <span class="token operator">+=</span> nums<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        l<span class="token operator">++</span><span class="token punctuation">;</span>
        h<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> move<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>\u89E3\u6CD5 2</strong></p><p>\u4F7F\u7528\u5FEB\u901F\u9009\u62E9\u627E\u5230\u4E2D\u4F4D\u6570\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6 O(N)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMoves2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> move <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> median <span class="token operator">=</span> <span class="token function">findKthSmallest</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        move <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num <span class="token operator">-</span> median<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> move<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findKthSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h1 id="\u591A\u6570\u6295\u7968\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u591A\u6570\u6295\u7968\u95EE\u9898" aria-hidden="true">#</a> \u591A\u6570\u6295\u7968\u95EE\u9898</h1><h2 id="_1-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u591A\u4E8E-n-2-\u7684\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_1-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u591A\u4E8E-n-2-\u7684\u5143\u7D20" aria-hidden="true">#</a> 1. \u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u591A\u4E8E n / 2 \u7684\u5143\u7D20</h2>`,13),T={href:"https://leetcode.com/problems/majority-element/description/",target:"_blank",rel:"noopener noreferrer"},P=t("169. Majority Element (Easy)"),V=s(`<p>\u5148\u5BF9\u6570\u7EC4\u6392\u5E8F\uFF0C\u6700\u4E2D\u95F4\u90A3\u4E2A\u6570\u51FA\u73B0\u6B21\u6570\u4E00\u5B9A\u591A\u4E8E n / 2\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u53EF\u4EE5\u5229\u7528 Boyer-Moore Majority Vote Algorithm \u6765\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF0C\u4F7F\u5F97\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(N)\u3002\u53EF\u4EE5\u8FD9\u4E48\u7406\u89E3\u8BE5\u7B97\u6CD5\uFF1A\u4F7F\u7528 cnt \u6765\u7EDF\u8BA1\u4E00\u4E2A\u5143\u7D20\u51FA\u73B0\u7684\u6B21\u6570\uFF0C\u5F53\u904D\u5386\u5230\u7684\u5143\u7D20\u548C\u7EDF\u8BA1\u5143\u7D20\u4E0D\u76F8\u7B49\u65F6\uFF0C\u4EE4 cnt--\u3002\u5982\u679C\u524D\u9762\u67E5\u627E\u4E86 i \u4E2A\u5143\u7D20\uFF0C\u4E14 cnt == 0\uFF0C\u8BF4\u660E\u524D i \u4E2A\u5143\u7D20\u6CA1\u6709 majority\uFF0C\u6216\u8005\u6709 majority\uFF0C\u4F46\u662F\u51FA\u73B0\u7684\u6B21\u6570\u5C11\u4E8E i / 2\uFF0C\u56E0\u4E3A\u5982\u679C\u591A\u4E8E i / 2 \u7684\u8BDD cnt \u5C31\u4E00\u5B9A\u4E0D\u4F1A\u4E3A 0\u3002\u6B64\u65F6\u5269\u4E0B\u7684 n - i \u4E2A\u5143\u7D20\u4E2D\uFF0Cmajority \u7684\u6570\u76EE\u4F9D\u7136\u591A\u4E8E (n - i) / 2\uFF0C\u56E0\u6B64\u7EE7\u7EED\u67E5\u627E\u5C31\u80FD\u627E\u51FA majority\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> majority <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        majority <span class="token operator">=</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> num <span class="token operator">:</span> majority<span class="token punctuation">;</span>
        cnt <span class="token operator">=</span> <span class="token punctuation">(</span>majority <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token operator">?</span> cnt <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> majority<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1 id="\u5176\u5B83" tabindex="-1"><a class="header-anchor" href="#\u5176\u5B83" aria-hidden="true">#</a> \u5176\u5B83</h1><h2 id="_1-\u5E73\u65B9\u6570" tabindex="-1"><a class="header-anchor" href="#_1-\u5E73\u65B9\u6570" aria-hidden="true">#</a> 1. \u5E73\u65B9\u6570</h2>`,6),O={href:"https://leetcode.com/problems/valid-perfect-square/description/",target:"_blank",rel:"noopener noreferrer"},L=t("367. Valid Perfect Square (Easy)"),U=s(`<div class="language-html ext-html"><pre class="language-html"><code>Input: 16
Returns: True
</code></pre></div><p>\u5E73\u65B9\u5E8F\u5217\uFF1A1,4,9,16,..</p><p>\u95F4\u9694\uFF1A3,5,7,...</p><p>\u95F4\u9694\u4E3A\u7B49\u5DEE\u6570\u5217\uFF0C\u4F7F\u7528\u8FD9\u4E2A\u7279\u6027\u53EF\u4EE5\u5F97\u5230\u4ECE 1 \u5F00\u59CB\u7684\u5E73\u65B9\u5E8F\u5217\u3002</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPerfectSquare</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> subNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num <span class="token operator">-=</span> subNum<span class="token punctuation">;</span>
        subNum <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_2-3-\u7684-n-\u6B21\u65B9" tabindex="-1"><a class="header-anchor" href="#_2-3-\u7684-n-\u6B21\u65B9" aria-hidden="true">#</a> 2. 3 \u7684 n \u6B21\u65B9</h2>`,6),Z={href:"https://leetcode.com/problems/power-of-three/description/",target:"_blank",rel:"noopener noreferrer"},H=t("326. Power of Three (Easy)"),K=s(`<div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">1162261467</span> <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_3-\u4E58\u79EF\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#_3-\u4E58\u79EF\u6570\u7EC4" aria-hidden="true">#</a> 3. \u4E58\u79EF\u6570\u7EC4</h2>`,2),R={href:"https://leetcode.com/problems/product-of-array-except-self/description/",target:"_blank",rel:"noopener noreferrer"},X=t("238. Product of Array Except Self (Medium)"),z=s(`<div class="language-html ext-html"><pre class="language-html"><code>For example, given [1,2,3,4], return [24,12,8,6].
</code></pre></div><p>\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4\uFF0C\u521B\u5EFA\u4E00\u4E2A\u65B0\u6570\u7EC4\uFF0C\u65B0\u6570\u7EC4\u7684\u6BCF\u4E2A\u5143\u7D20\u4E3A\u539F\u59CB\u6570\u7EC4\u4E2D\u9664\u4E86\u8BE5\u4F4D\u7F6E\u4E0A\u7684\u5143\u7D20\u4E4B\u5916\u6240\u6709\u5143\u7D20\u7684\u4E58\u79EF\u3002</p><p>\u8981\u6C42\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(N)\uFF0C\u5E76\u4E14\u4E0D\u80FD\u4F7F\u7528\u9664\u6CD5\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>products<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        products<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        right <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        products<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> products<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_4-\u627E\u51FA\u6570\u7EC4\u4E2D\u7684\u4E58\u79EF\u6700\u5927\u7684\u4E09\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#_4-\u627E\u51FA\u6570\u7EC4\u4E2D\u7684\u4E58\u79EF\u6700\u5927\u7684\u4E09\u4E2A\u6570" aria-hidden="true">#</a> 4. \u627E\u51FA\u6570\u7EC4\u4E2D\u7684\u4E58\u79EF\u6700\u5927\u7684\u4E09\u4E2A\u6570</h2>`,5),J={href:"https://leetcode.com/problems/maximum-product-of-three-numbers/description/",target:"_blank",rel:"noopener noreferrer"},G=t("628. Maximum Product of Three Numbers (Easy)"),Q=s(`<div class="language-html ext-html"><pre class="language-html"><code>Input: [1,2,3,4]
Output: 24
</code></pre></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> max2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> max3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> min1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> min2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> max1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max3 <span class="token operator">=</span> max2<span class="token punctuation">;</span>
            max2 <span class="token operator">=</span> max1<span class="token punctuation">;</span>
            max1 <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> max2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max3 <span class="token operator">=</span> max2<span class="token punctuation">;</span>
            max2 <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> max3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max3 <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> min1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>
            min1 <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> min2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            min2 <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max1<span class="token operator">*</span>max2<span class="token operator">*</span>max3<span class="token punctuation">,</span> max1<span class="token operator">*</span>min1<span class="token operator">*</span>min2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,2);function W(Y,$){const a=o("ExternalLinkIcon");return u(),c(l,null,[i,n("p",null,[n("a",k,[b,p(a)])]),m,n("p",null,[n("a",d,[h,p(a)])]),y,n("p",null,[n("a",g,[f,p(a)])]),w,n("p",null,[n("a",E,[v,p(a)])]),_,n("p",null,[n("a",B,[A,p(a)])]),x,n("p",null,[n("a",j,[S,p(a)])]),N,n("p",null,[n("a",C,[q,p(a)])]),F,n("p",null,[n("a",I,[M,p(a)])]),D,n("p",null,[n("a",T,[P,p(a)])]),V,n("p",null,[n("a",O,[L,p(a)])]),U,n("p",null,[n("a",Z,[H,p(a)])]),K,n("p",null,[n("a",R,[X,p(a)])]),z,n("p",null,[n("a",J,[G,p(a)])]),Q],64)}var an=e(r,[["render",W],["__file","Leetcode\u9898\u89E3-\u6570\u5B66.html.vue"]]);export{an as default};
